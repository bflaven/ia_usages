
# https://blog.pamelafox.org/2023/03/deploying-containerized-fastapi-app-to.html

# aca stands for Advanced Computer Architecture
# aka stands for Also Known As


--- chat_GPT_3_5_prompt_1 (az_project_name_generator.py)
+ PROMPT
What is the best convention for naming a set of values for Azure ? Give me short advices.
Then, can you write a script that generate an application name named "appName" in English with 10 random colors, 10 random common keywords with five random characters at the end of the appName with always the first character as a number between 0 to 9. Some examples below:

# orangesmokeZceb35b3
# purpleground2c63d040
# greenfox2c63d040

+ OUTPUT

Naming conventions for Azure resources and values should be consistent, descriptive, and easy to understand. Here are some short pieces of advice for naming Azure resources:

1. **Be Descriptive**: Use names that convey the purpose and function of the resource. Avoid cryptic or abbreviated names.

2. **Use Lowercase**: Azure resource names are case-insensitive, but lowercase names are recommended for consistency.

3. **Avoid Special Characters**: Stick to letters, numbers, and hyphens in names. Avoid spaces and other special characters.

4. **Keep It Short**: While being descriptive, keep the names relatively short to avoid complexity.

5. **Use a Prefix**: Consider using a prefix to categorize resources. For example, "app-" for applications.

6. **Avoid Reserved Words**: Don't use Azure reserved words in your resource names.

7. **Use Hyphens for Separation**: If needed, use hyphens to separate words within a name. For example, "my-app" instead of "myapp."

Now, here's a Python script that generates an application name following your specified format:

```python
import random
import string

# List of random colors and common keywords
# List of random colors and common keywords
colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink', 'yellow', 'brown', 'teal', 'gray']
keywords = ['smoke', 'ground', 'fox', 'apple', 'banana', 'sun', 'moon', 'star', 'sky', 'ocean']

# Generate a random application name
def generate_app_name():
    # Randomly select a color and keyword
    color = random.choice(colors)
    keyword = random.choice(keywords)
    
    # Generate a random 5-character string
    rand_chars = ''.join(random.choice(string.ascii_lowercase) for _ in range(5))
    
    # Randomly choose the first character as a number between 0 and 9
    first_char = str(random.randint(0, 9))
    
    # Combine all components to create the application name
    app_name = f"{color}{keyword}{first_char}{rand_chars}"
    
    return app_name

# Generate and print example application names
for _ in range(3):
    app_name = generate_app_name()
    print(app_name)
```

This script will generate and print three example application names following the format you specified, with random colors, common keywords, and random characters. You can adjust the number of examples by changing the range in the loop.


--- chat_GPT_3_5_prompt_1 (az_update_existing_application.py)
+ PROMPT
Write a script in python that goes to certain path e.g /Users/brunoflaven/Documents/01_work/blog_articles/ia_deploy_api_ml_architecture/simple-app-fastapi-azure and then execute these two commands with az cli, put the values "wannatrycontainerregistry" and "try-fastapi" in two variables and make a duration to five second between the execution of the 2 commands.



+ OUTPUT
  
  You can use Python to run commands with the `subprocess` module and add a delay between them using `time.sleep`. Here's a Python script that does this:

```python
import subprocess
import time

# Define the path
path = "/Users/brunoflaven/Documents/01_work/blog_articles/ia_deploy_api_ml_architecture/simple-app-fastapi-azure"

# Define the variables
container_registry_name = "wannatrycontainerregistry"
app_service_name = "try-fastapi"

# Define the Azure CLI commands
command1 = f"az acr create --name {container_registry_name} --resource-group myResourceGroup --sku Basic"
command2 = f"az webapp up --name {app_service_name} --location centralus --sku B1 --os-type Linux --container-registry {container_registry_name}"

# Change directory to the specified path
try:
    os.chdir(path)
except OSError:
    print(f"Could not change directory to {path}")
    exit(1)

# Execute the first command
subprocess.run(command1, shell=True)

# Wait for 5 seconds
time.sleep(5)

# Execute the second command
subprocess.run(command2, shell=True)
```

In this script, we first change the working directory to the specified path using `os.chdir`. Then, we define the variables `container_registry_name` and `app_service_name`, and the Azure CLI commands using f-strings to insert these variables. We use `subprocess.run` to execute the commands one by one, with a 5-second delay in between them using `time.sleep(5)`. Make sure to customize the Azure CLI commands and paths as needed for your specific use case.


