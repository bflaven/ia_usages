! A. SOURCE

- Article: Step by step Introducing to Azure Cloud Deployment: Deploying a FastAPI ML Feature API
https://flaven.fr/2023/10/step-by-step-introducing-to-azure-cloud-deployment-deploying-a-fastapi-ml-feature-api/

- Path (local)
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/

! B. DIRECTORIES ON GITHUB
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture

- advanced_docker_compose_fastapi: 
--- several example suing docker-compose and Makefile.
- api_fastapi_routes: 
--- routing issue with the help of ChatGPT
- fastapi-simple-app: 
--- simple app to deploy
- fastapi_cheatsheet: 
--- cheat sheet for fastapi for documentation especially.
- fastapi_tiangolo_advanced_settings: 
--- advanced setting examples.
- mamamia-fastapi-azure: 
--- application, written with the help of ChatGPT, made with FastAPI deployed to the Azure Cloud.

! C. ENVIRONMENT ANACONDA

[env]
# Conda Environment
conda create --name azure_fastapi python=3.9.13
conda info --envs
source activate azure_fastapi
conda deactivate

# if needed to remove
conda env remove -n [NAME_OF_THE_CONDA_ENVIRONMENT]
conda env remove -n azure_fastapi

# update conda 
conda update -n base -c defaults conda

# to export requirements
pip freeze > requirements.txt

# to install
pip install -r requirements.txt


- Tools to create and manage of virtual environments:

--- ANACONDA
https://www.anaconda.com/

--- PYTHON-POETRY
https://python-poetry.org/

--- VENV
https://docs.python.org/3/library/venv.html

--- FASTAPI
https://fastapi.tiangolo.com/


! D. EXAMPLES

+ 1. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Testing locally with ananconda
--- Video: 001_az_using_fastapi_simple_app_testing_locally.mov

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

- DESCRIPTION
A very basic application made with FastAPI that can be the first app that you intend to deploy on Azure.

- TERMINAL_SCREEN (blue)
# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure/

# LAUNCH THE ENV
source activate azure_fastapi

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000


+ 2. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Testing locally in Docker to prepare the deployment on Azure
--- Video: 002_az_using_fastapi_simple_app_testing_locally_docker.mov

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

- DESCRIPTION
A very basic application made with FastAPI that can be the first app that you intend to deploy on Azure.

- TERMINAL_SCREEN (blue)
# get into the dir
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

! # START with increment the tags e.g test1, test2, test3... etc

# build the Docker image named "bf-fastapi-demo:test9"
docker build --tag bf-fastapi-demo:test9 .

# The application Docker has to be up and running

# run a container named "test9-bf-fastapi-container". It is an instance of an image named "bf-fastapi-demo:test9"
docker run -d --name test9-bf-fastapi-container -p 80:80 bf-fastapi-demo:test9

# The Dockerfile tells FastAPI to use a port of 80, so the run command publishes the container's port 80 as port 80 on the local computer. I visit localhost:80 to confirm that my API is up and running. üèÉüèΩ‚Äç‚ôÄÔ∏è

# check the app locally
http://localhost:80

# list the images
docker ps

# stop the container test9-bf-fastapi-container
docker stop test9-bf-fastapi-container

# remove the container test5-yt-bf-fastapi-container
docker rm -f test9-bf-fastapi-container

# remove the image with bf-fastapi-demo:test9
docker rmi --force bf-fastapi-demo:test9

! # END If you change the code, you can restart from START above and redo the commands.

# NUKE DOCKER IMAGES AND CONTAINERS
# remove all containers
docker rm -f $(docker ps -aq)

# remove everything
docker system prune

+ 3. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Deploying the simple app on Azure
--- Video: 003_az_using_fastapi_simple_app_Deploying_azure.mov


+ 4. MAMAMIA-FASTAPI-AZURE (mamamia-fastapi-azure) :

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/mamamia-fastapi-azure

- DESCRIPTION
A very simple, educational and hybrid project that demonstrate how-to create an API with FastAPI (backend) that will back a web app made with Streamlit. Nice source of inspiration and a basic illustration of the FRONTEND, API, MODEL workflow.

- TERMINAL_SCREEN (blue)

# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/mamamia-fastapi-azure/

# LAUNCH THE ENV
source activate azure_fastapi

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000



+ 5. ADVANCED_DOCKER_COMPOSE_FASTAPI (advanced_docker_compose_fastapi): 

- DESCRIPTION
Here is the list of directories. Let's take some examples with streamlit and FastAPI.

--- 002_mikecase_fastapi_docker
--- 003_avanishcodes_docker_compose
--- 004_tsadimas_fastapi_docker_compose
--- 005_j0kim_fastapi_docker_virtualenv
--- 009_davidefiocco_streamlit_fastapi_model_serving
--- 011_rihabfekii_streamlit_fastapi_model_serving
--- 013_kurtispykes_streamlit_car_evaluation_project

Let's take this one "009_davidefiocco_streamlit_fastapi_model_serving"

+ 6. 009_davidefiocco_streamlit_fastapi_model_serving


! CAUTION: It requires to have Docker installed and Up and Running.

--- DOCKER
https://www.docker.com/

--- STREAMLIT
https://streamlit.io/


- DESCRIPTION
A very simple, educational and hybrid project that demonstrate how-to create an API with FastAPI (backend) that will back a web app made with Streamlit. Nice source of inspiration and a basic illustration of the FRONTEND, API, MODEL workflow.


- CONSOLE_SCREEN_1 (blue)
# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/advanced_docker_compose_fastapi/009_davidefiocco_streamlit_fastapi_model_serving/

# LAUNCH DOCKER
make up

# to get some infos
make help

# FastAPI
http://0.0.0.0:8000/docs
http://localhost:8000/docs

# streamlit UI
http://0.0.0.0:8501
http://localhost:8501


+ 7. AZURE-CLI COMMAND: 

# login with Azure CLI, it will open a browsers
az login

# Show specific group
az group show --name try-fastapi-rg

# CAUTION: with this command, you will remove and clean up everything
az group delete --name try-fastapi-rg


