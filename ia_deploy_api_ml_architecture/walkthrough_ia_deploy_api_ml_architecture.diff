! A. SOURCE

- Article: Step by step Introducing to Azure Cloud Deployment: Deploying a FastAPI ML Feature API
https://flaven.fr/2023/10/step-by-step-introducing-to-azure-cloud-deployment-deploying-a-fastapi-ml-feature-api/

- Path (local)
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/

! B. DIRECTORIES ON GITHUB
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture

- advanced_docker_compose_fastapi: 
--- several example suing docker-compose and Makefile.
- api_fastapi_routes: 
--- routing issue with the help of ChatGPT
- fastapi-simple-app: 
--- simple app to deploy
- fastapi_cheatsheet: 
--- cheat sheet for fastapi for documentation especially.
- fastapi_tiangolo_advanced_settings: 
--- advanced setting examples.
- mamamia-fastapi-azure: 
--- application, written with the help of ChatGPT, made with FastAPI deployed to the Azure Cloud.

! C. ENVIRONMENT ANACONDA

[env]
# Conda Environment
conda create --name azure_fastapi python=3.9.13
conda info --envs
source activate azure_fastapi
conda deactivate

# if needed to remove
conda env remove -n [NAME_OF_THE_CONDA_ENVIRONMENT]
conda env remove -n azure_fastapi

# update conda 
conda update -n base -c defaults conda

# to export requirements
pip freeze > requirements.txt

# to install
pip install -r requirements.txt


- Tools to create and manage of virtual environments:

--- ANACONDA
https://www.anaconda.com/

--- PYTHON-POETRY
https://python-poetry.org/

--- VENV
https://docs.python.org/3/library/venv.html

--- FASTAPI
https://fastapi.tiangolo.com/


! D. EXAMPLES

+ 1. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Testing locally with anaconda
--- Video: 001_az_using_fastapi_simple_app_testing_locally.mov

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

- DESCRIPTION
A very basic application made with FastAPI that can be the first app that you intend to deploy on Azure.

- TERMINAL_SCREEN (blue)
# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure/

# LAUNCH THE ENV
source activate azure_fastapi

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000


+ 2. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Testing locally in Docker to prepare the deployment on Azure
--- Video: 002_az_using_fastapi_simple_app_testing_locally_docker.mov

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

- DESCRIPTION
A very basic application made with FastAPI that can be the first app that you intend to deploy on Azure.

- TERMINAL_SCREEN (blue)
# get into the dir
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

! # START with increment the tags e.g test1, test2, test3... etc

# build the Docker image named "bf-fastapi-demo:test10"
docker build --tag bf-fastapi-demo:test11 .

# The application Docker has to be up and running

# run a container named "test11-bf-fastapi-container". It is an instance of an image named "bf-fastapi-demo:test10"
docker run -d --name test11-bf-fastapi-container -p 80:80 bf-fastapi-demo:test11

# The Dockerfile tells FastAPI to use a port of 80, so the run command publishes the container's port 80 as port 80 on the local computer. I visit localhost:80 to confirm that my API is up and running. üèÉüèΩ‚Äç‚ôÄÔ∏è

# check the app locally
http://localhost:80

# list the images
docker ps

# stop the container test10-bf-fastapi-container
docker stop test10-bf-fastapi-container

# remove the container test5-yt-bf-fastapi-container
docker rm -f test10-bf-fastapi-container

# remove the image with bf-fastapi-demo:test10
docker rmi --force bf-fastapi-demo:test10

! # END If you change the code, you can restart from START above and redo the commands.

# NUKE DOCKER IMAGES AND CONTAINERS
# remove all containers
docker rm -f $(docker ps -aq)

# remove everything
docker system prune

+ 3. SIMPLE-APP-FASTAPI-AZURE (simple-app-fastapi-azure) :
--- Objective: Deploying the simple app on Azure
--- Video: 003_az_using_fastapi_simple_app_Deploying_azure.mov

- RESSOURCES 
--- Azure services
https://portal.azure.com/#home

--- Azure Command-Line Interface (CLI) documentation
https://learn.microsoft.com/en-us/cli/azure/

--- Azure Extensions for Visual Studio (optionnal)
https://code.visualstudio.com/docs/azure/extensions

--- Deploying a containerized FastAPI app to Azure Container Apps

https://blog.pamelafox.org/2023/03/deploying-containerized-fastapi-app-to.html


- CONSOLE_SCREEN_1 (blue)
# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure/

--- Redo the docker process

- CONSOLE_SCREEN_2 (red)
- REQUIREMENT: Install Azure CLI

--- https://learn.microsoft.com/en-us/cli/azure/
! # SOME COMMANDS FOR Azure CLI

# Install the azure-cli
brew update && brew install azure-cli

# Check the install
az --version

# Log in to Azure
az login

# By default, this command logs in with a user account. CLI will try to launch a web browser to log in interactively. If a web browser is not available, CLI will fall back to device code login. To login with a service principal, specify --service-principal.

# Go to the dir
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure/


- PROCESS: 4. Deploy to Azure this simple FastAPI App named "simple-app-fastapi-azure"


! # 4.1 Push image to registry
# STEP_1. check the install
az --version

# STEP_2. Requirement, you must be logged
az login

# By default, this command logs in with a user account. CLI will try to launch a web browser to log in interactively. If a web browser is not available, CLI will fall back to device code login. To login with a service principal, specify --service-principal.

# az login: Log in to Azure.
# By default, this command logs in with a user account. CLI will try to launch a web browser to log in interactively. If a web browser is not available, CLI will fall back to device code login. To login with a service principal, specify --service-principal.

# STEP_3. Create a resource group
# Careful you can reuse an existing one but in this example I created from scratch
# COMMAND MODEL :: az group create --location eastus --name fastapi-aca-rg

# COMMAND GOOD
az group create --location eastus --name fastapi-try-rg

# if you need to delete
az group delete --name fastapi-try-rg


# STEP_4. Create a container registry wannatrycontainerregistry for the resource group "fastapi-try-rg"

# COMMAND MODEL :: az acr create --resource-group fastapi-aca-rg \ --name pamelascontainerregistry --sku Basic

# COMMAND GOOD
az acr create --resource-group fastapi-try-rg --name wannatrycontainerregistry --sku Basic


# STEP_5. Log into the registry so that later commands can push images to it:
# COMMAND MODEL :: az acr login --name pamelascontainerregistry

# COMMAND GOOD
az acr login --name wannatrycontainerregistry



# STEP_6. uploads the code to cloud and builds it there:
# COMMAND MODEL :: az acr build --platform linux/amd64 -t pamelascontainerregistry.azurecr.io/fastapi-try:latest -r pamelascontainerregistry .

# must be in a directory with a Dockerfile
# cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure

# COMMAND GOOD
az acr build --platform linux/amd64 -t wannatrycontainerregistry.azurecr.io/fastapi-try:latest -r wannatrycontainerregistry . 


! # 4.2 Deploy to Azure Container App

# You must be in the directory of your app 
# cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/simple-app-fastapi-azure


# STEP_1: (OPTIONNAL) Upgrade the extension and register the necessary providers:
az extension add --name containerapp --upgrade
az provider register --namespace Microsoft.App
az provider register -n Microsoft.OperationalInsights --wait

# STEP_2: Create an environment for the container app:
# COMMAND MODEL :: az containerapp env create --name fastapi-aca-env \
    --resource-group fastapi-aca-rg --location eastus

# COMMAND GOOD
az containerapp env create --name fastapi-try-env --resource-group fastapi-try-rg --location eastus

# This will output the URL aka defaultDomain e.g : 
# orangesmoke-cceb35b3.eastus.azurecontainerapps.io
# purpleground-2c63d040.eastus.azurecontainerapps.io


# STEP_3: You must enable the admin:
# Run 'az acr update -n pamelascontainerregistry --admin-enabled true' to enable admin first.

# COMMAND GOOD
az acr update -n wannatrycontainerregistry --admin-enabled true

# STEP_4: Generate credentials to use for the next step:
# COMMAND MODEL :: az acr credential show --name pamelascontainerregistry

# output where you get the password

# COMMAND GOOD
az acr credential show --name wannatrycontainerregistry

# OUPUT where you can find the password.
{
  "passwords": [
    {
      "name": "password",
      "value": "FAKE+Ubb8iqWTtnDVDZg1ylHcCtHTTogZDt6iULcbKC+XXXXXXXXX"
    },
    {
      "name": "password2",
      "value": "FAKE+lwCMl71GlToW8YyeAsGaskVE4X8oLE2S8HipB+XXXXXXXXX"
    }
  ],
  "username": "wannatrycontainerregistry"
}


# STEP_5: Create the container app, passing in the username and password from the credentials:

# COMMAND MODEL 
az containerapp create --name fmm-fastapi-app \
    --resource-group fmm-fastapi-rg \
    --image pamelascontainerregistry.azurecr.io/fastapi-aca:latest \
    --environment fastapi-aca-env \
    --registry-server pamelascontainerregistry.azurecr.io \
    --registry-username pamelascontainerregistry \
    --registry-password PASSWORD_HERE \
    --ingress external \
    --target-port 80

# COMMAND GOOD
# Do not forget to replace the password with one show earlier

az containerapp create --name try-fastapi-app \
    --resource-group fastapi-try-rg \
    --image wannatrycontainerregistry.azurecr.io/fastapi-try:latest \
    --environment fastapi-try-env \
    --registry-server wannatrycontainerregistry.azurecr.io \
    --registry-username wannatrycontainerregistry \
    --registry-password 2Ix9XXRCZzRSNvcJxwtw94rEtA1xXLbipJ4LCvKwOq+ACRA4iZNM \
    --ingress external \
    --target-port 80


# Output you have your f... latestRevisionFqdn where it is the url where the app live ! Bingo



+ 4. MAMAMIA-FASTAPI-AZURE (mamamia-fastapi-azure) :

- CODE: 
https://github.com/bflaven/ia_usages/tree/main/ia_deploy_api_ml_architecture/mamamia-fastapi-azure

- DESCRIPTION
A very simple, educational and hybrid project that demonstrate how-to create an API with FastAPI (backend) that will back a web app made with Streamlit. Nice source of inspiration and a basic illustration of the FRONTEND, API, MODEL workflow.

- TERMINAL_SCREEN (blue)

# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/mamamia-fastapi-azure/

# LAUNCH THE ENV
source activate azure_fastapi

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000



+ 5. ADVANCED_DOCKER_COMPOSE_FASTAPI (advanced_docker_compose_fastapi): 

- DESCRIPTION
Here is the list of directories. Let's take some examples with streamlit and FastAPI.

--- 002_mikecase_fastapi_docker
--- 003_avanishcodes_docker_compose
--- 004_tsadimas_fastapi_docker_compose
--- 005_j0kim_fastapi_docker_virtualenv
--- 009_davidefiocco_streamlit_fastapi_model_serving
--- 011_rihabfekii_streamlit_fastapi_model_serving
--- 013_kurtispykes_streamlit_car_evaluation_project

Let's take this one "009_davidefiocco_streamlit_fastapi_model_serving"

+ 6. 009_davidefiocco_streamlit_fastapi_model_serving


! CAUTION: It requires to have Docker installed and Up and Running.

--- DOCKER
https://www.docker.com/

--- STREAMLIT
https://streamlit.io/


- DESCRIPTION
A very simple, educational and hybrid project that demonstrate how-to create an API with FastAPI (backend) that will back a web app made with Streamlit. Nice source of inspiration and a basic illustration of the FRONTEND, API, MODEL workflow.


- CONSOLE_SCREEN_1 (blue)
# GO TO DIR
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_deploy_api_ml_architecture/advanced_docker_compose_fastapi/009_davidefiocco_streamlit_fastapi_model_serving/

# LAUNCH DOCKER
make up

# to get some infos
make help

# FastAPI
http://0.0.0.0:8000/docs
http://localhost:8000/docs

# streamlit UI
http://0.0.0.0:8501
http://localhost:8501


+ 7. AZURE-CLI COMMAND: 

# login with Azure CLI, it will open a browsers
az login

# Show specific group
az group show --name try-fastapi-rg
az group show --all


# CAUTION: with this command, you will remove and clean up everything
az group delete --name try-fastapi-rg


+ 8. AZURE EXTENSIONS FOR VISUAL CODE:
Check this page if you want to configure VS Code to work directly into VS Code
See https://code.visualstudio.com/docs/azure/extensions
