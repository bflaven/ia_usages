

--- walkthrough_ia_build_vue_js_on_fastapi.diff


! (I) SOURCE
- Article: Building a Vue.js SPA (Single Page Application) Frontend with FastAPI Backend for AI Integration
Source : https://flaven.fr/2024/07/building-a-vue-js-spa-single-page-application-frontend-with-fastapi-backend-for-ai-integration/

Post : https://wp.me/p3Vuhl-3lp
Code : https://shorturl.at/jkOOX


--- Here are some experiments made with Streamlit that prevents me from switching from Streamlit to Vue.js with no doubt.

- Backend (FastAPI):
It provides RESTful APIs for CRUD operations and serves as the backend server for the application.
- Frontend (Vue.js):
It is a single-page application (SPA) built using Vue.js to interact with the backend APIs and render the user interface.



! (II) REQUIREMENTS

+ NEED HOMEBREW, NODE.JS AND NPM + ANACONDA + PYTHON + OTHER TOOLS (MAC)
--- Install Homebrew (See https://brew.sh/): 
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
--- Install Node.js and NPM:
brew install node

--- Check the install of Node.js and NPM:
# check
node -v
npm -v

--- Links for JavaScript
- HOMEBREW: https://brew.sh/
- NODE: https://nodejs.org/en
- VUEJS: https://vuejs.org/
- VITEJS: https://vitejs.dev/

--- Links for Python
- ANACONDA: https://www.anaconda.com/
- FASTAPI: https://fastapi.tiangolo.com/

--- Links for Tools
- VISUAL STUDIO CODE: https://code.visualstudio.com/
- SUBLIMETEXT: https://www.sublimetext.com/


+ CREATE THE ENV WITH ANACONDA
"""
[env]
# Conda Environment
conda create --name fmm_fastapi_poc python=3.9.13
conda info --envs
source activate fmm_fastapi_poc
conda deactivate

# if needed to remove
conda env remove -n [NAME_OF_THE_CONDA_ENVIRONMENT]
conda env remove -n fmm_fastapi_poc

# update conda 
conda update -n base -c defaults conda

# to export requirements
pip freeze > requirements.txt

# to install
pip install -r requirements.txt

# [path]
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/006_fastapi_database/backend_1/

# LAUNCH THE API
uvicorn main:app --reload

# Check localhost
http://127.0.0.1:8000/docs
http://127.0.0.1:8000/redoc


"""

- Open a terminla and get to your dir
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi

! (III) CREATE AN APP WITH VITE OR VUE.JS

--- TERMINAL (BLUE) FOR JAVASCRIPT

+ A. USING VITE TO CREATE AN APP
--- 001_ia_build_vite.mov

- Install Vite
# CAUTION: if you want to use the commnds vite 
npm install -g vite

# For dev
vite -v

- scaffolding your first vite project (way_1)

--- create a directory
# to create the dir
mkdir test-yt-vite-project-1
# to delete the dir
rm -r test-yt-vite-project-1
# get into the dir
cd test-yt-vite-project-1

--- You will need a project name for our vite project e.g. my-vite-app-yt-1

--- scaffold your first project
npm create vite@latest

--- go to the app named "my-vite-app-yt-1" and run command
cd my-vite-app-yt-1
npm install
npm run dev
npm run toto


- create your first vite project

--- create a directory
# to create the dir
mkdir test-yt-vite-project-1
# to delete the dir
rm -r test-yt-vite-project-1
# get into the dir
cd test-yt-vite-project-1


- create your first vite project (way_2)
npm create vite@latest my-vite-app-yt-1 -- --template vue

--- go to the app named "my-vite-app-yt-1"
cd my-vite-app-yt-1
npm install
npm run dev

--- identical commands inside the app named "my-vite-app-yt-1"
# For build
vite build

# For preview or serve
vite preview

--- Source: Checkout https://vitejs.dev/guide/


+ B. USING VUEJS TO CREATE AN APP
--- 002_ia_build_vuejs.mov

--- create a directory
# to create the dir
mkdir test-yt-vue-project-1
# to delete the dir
rm -r test-yt-vue-project-1
# get into the dir
cd test-yt-vue-project-1


--- scaffold a Vue Single Page Application
npm create vue@latest


--- go to the app named "my-vue-app-yt-1"
cd my-vue-app-yt-1
npm install
npm run format
npm run dev

--- Source: https://vuejs.org/guide/quick-start.html

+ C. OTHER EXAMPLES USING VUEJS TO CREATE AN APP

! # EXAMPLE the_vue_js_handbook:
--- 003_ia_vue_fastapi_the_vue_js_handbook.mov

- path
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/the_vue_js_handbook/


- open the file with chrome 
digitalocean_your_first_vue_app_12.html 

- launch fake server
json-server -p 5555 posts.json
# Check http://localhost:5555/posts


! (IV) CREATE A FASTAPI API

+ EXAMPLE 002_fastapi_vite:
--- 004_ia_vue_fastapi_002_fastapi_vite.mov


+ FRONTEND
- path
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/002_fastapi_vite/frontend/

- frontend
npm install
npm run dev

+ BACKEND
- path
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/002_fastapi_vite/backend/

# USING CONDA
conda info --envs

# LAUNCH THE ENV
source activate fmm_fastapi_poc

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000/docs

+ EXAMPLE 006_fastapi_database:
--- 005_ia_vue_fastapi_006_fastapi_database.mov

- Description
Some simple examples of API made with FastAPI 

- CONSOLE
# GO TO DIR

--- example_1
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/006_fastapi_database/backend_1

--- example_1
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/006_fastapi_database/backend_2


# LAUNCH THE ENV
source activate fmm_fastapi_poc

# LAUNCH THE API
uvicorn main:app --reload

# CHECK THE API
http://127.0.0.1:8000/docs


! (V) SOME INVESTIGATION ON STREAMLIT

+ EXAMPLE streamlit_video_mp4:
--- 006_ia_vue_fastapi_streamlit.mov

cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/streamlit_video_mp4/video_streamlit/

# launch the anacoda env
source activate fmm_fastapi_poc

# launch the file
streamlit run 010_video_streamlit.py


+ EXAMPLE streamlit_no_reruns:
cd /Users/brunoflaven/Documents/03_git/ia_usages/ia_build_vue_js_on_fastapi/streamlit_no_reruns/

# launch the anacoda env
source activate fmm_fastapi_poc

# launch the file
streamlit run 001_streamlit_no_reruns_checkbox.py
streamlit run 002_streamlit_no_reruns_session.py


! (VI) OTHER FILES
_prompt
api_mock_notes.json
grab_title_url.py


! (VII) YOUTUBE

+  (1) FILES FOR YOUTUBE

- VIDEO_1 001_ia_build_vite.mov
--- 001_ia_build_vite.png
+ https://youtu.be/RjP-KkmfscM

- VIDEO_2 002_ia_build_vuejs.mov
--- 002_ia_build_vuejs.png
+ https://youtu.be/lZFLytx-mr8

- VIDEO_3 003_ia_vue_fastapi_the_vue_js_handbook.mov
--- 003_ia_vue_fastapi_the_vue_js_handbook.png
+ https://youtu.be/xZnym1tL3IY

- VIDEO_4 004_ia_vue_fastapi_002_fastapi_vite.mov
--- 004_ia_vue_fastapi_002_fastapi_vite.png
+ https://youtu.be/RYKZfTAaC54


- VIDEO_5 005_ia_vue_fastapi_006_fastapi_database.mov
--- 005_ia_vue_fastapi_006_fastapi_database.png
+ https://youtu.be/Tjr5DYqxapE

- VIDEO_6 006_ia_vue_fastapi_streamlit.mov
--- 006_ia_vue_fastapi_streamlit.png
+ https://youtu.be/xQT6bxVNbqY

+  (1) TITLE FOR YOUTUBE

1. Scaffold Your First Vitejs App: Comprehensive Beginner's Guide
#scaffold Your First #vitejs #app: Comprehensive Beginner's Guide

2. Master Vuejs: Build Your First App and Project with Ease
Master #vuejs: Build Your First #app and Project with Ease

3. Display API Data using Vuejs & Axios: Step-by-Step Tutorial
Display #api Data using #vuejs & #axios: Step-by-Step Tutorial

4. Connect FastAPI Backend to Vue.js Frontend: Full Guide
Connect #fastapi #backend to #vuejs #frontend: Full Guide

5. FastAPI Development: Boost Productivity with Database Boilerplates
#fastapi #development Boost #productivity with boilerplate code with #database


6. Streamlit Mastery: View Whisper Transcripts & Prevent Page Reloads
#streamlit Mastery: View #whisper #transcripts & Prevent Page Reloads

+  (2) CONTENT FOR YOUTUBE

<b>This video is part of a post "Building a Vue.js SPA (Single Page Application) Frontend with FastAPI Backend for AI Integration"</b>

<b>QUICK DESCRIPTION</b>
Transitioning from Streamlit to Vue.js: some expeiments made with Vuejs and Vitejs to achieve the migration from a frontrend in Streamlit to Vitejs or Vuejs.

In these videos post, I delve into the process of replacing Streamlit with Vue.js as the frontend for an AI-powered web application, connecting it to an API built with FastAPI. The shift aims to delegate frontend management to a separate team, allowing the AI team to focus on high-value tasks such as fine-tuning and model selection. Discover a simple yet effective architecture for the application, with a tech stack featuring FastAPI, SQLAlchemy, Vue.js, Vuex, and more.


<b>URLs</b>
POST: <a href="https://wp.me/p3Vuhl-3lp" target="_blank" rel="noopener">https://wp.me/p3Vuhl-3lp</a> 
CODE: <a href="https://shorturl.at/jkOOX" target="_blank" rel="noopener">https://shorturl.at/jkOOX</a>

--- FOR YT ONLY
This video is part of a post "Building a Vue.js SPA (Single Page Application) Frontend with FastAPI Backend for AI Integration"

QUICK DESCRIPTION
Transitioning from Streamlit to Vue.js: some experiments made with Vuejs and Vitejs to achieve the migration from a frontrend in Streamlit to Vitejs or Vuejs.

In these videos post, I delve into the process of replacing Streamlit with Vue.js as the frontend for an AI-powered web application, connecting it to an API built with FastAPI. The shift aims to delegate frontend management to a separate team, allowing the AI team to focus on high-value tasks such as fine-tuning and model selection. Discover a simple yet effective architecture for the application, with a tech stack featuring FastAPI, SQLAlchemy, Vue.js, Vuex, and more.


URLs
POST: https://wp.me/p3Vuhl-3lp
CODE: https://shorturl.at/jkOOX

--- YOUTUBE WITH HASHTAGS
This video is part of a post "Building a #vuejs #spa  (Single Page Application) Frontend with #fastapi  #backend  for #ai Integration"

QUICK DESCRIPTION
Transitioning from #streamlit to #vuejs: some experiments made with #vuejs and #vitejs to achieve the migration from a frontend in #streamlit to #vuejs or #vitejs.

In these videos post, I delve into the process of replacing Streamlit with Vue.js as the frontend for an AI-powered web application, connecting it to an API built with FastAPI. The shift aims to delegate frontend management to a separate team, allowing the AI team to focus on high-value tasks such as fine-tuning and model selection. Discover a simple yet effective architecture for the application, with a tech stack featuring FastAPI, SQLAlchemy, Vue.js, Vuex, and more.


URLs
POST:  https://wp.me/p3Vuhl-3lp
CODE: https://shorturl.at/jkOOX


+ (3) KEYWORDS FOR YOUTUBE

FastAPI, Python, backend, Vue.js, frontend, boilerplate codes, databases, Streamlit, Whisper Transcript, video, page reloading, user action, vitejs, scaffolding, first app, getting started, creating, project, axios, display data, api, how to use, web development, full stack development, REST API, data visualization, user interface, user experience, web application framework, single page application, data fetching, HTTP requests, data binding, web components, template engine





