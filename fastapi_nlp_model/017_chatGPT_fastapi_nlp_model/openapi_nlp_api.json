{"openapi": "3.1.0", "info": {"title": "TrattorIA", "description": "Obtain different features in NLP from Spacy in FR, ES, EN, RU + other features using nltk (nlp) and gtts (audio). It returns json as result.", "version": "1.0"}, "paths": {"/healthcheck": {"get": {"tags": ["healthcheck"], "summary": "Perform Healthcheck", "description": "It basically sends a GET request to the route & hopes to get a \"200\"\nresponse code. Failing to return a 200 response code just enables\nthe GitHub Actions to rollback to the last version the project was\nfound in a \"working condition\". It acts as a last line of defense in case something goes south.\nAdditionally, it also returns a JSON response in the form of:\n{\n    'healtcheck': 'Everything OK!'\n}", "operationId": "perform_healthcheck_healthcheck_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/summary/{lang}": {"get": {"tags": ["summary"], "summary": "Get Summary", "operationId": "get_summary_summary__lang__get", "parameters": [{"name": "lang", "in": "path", "required": true, "schema": {"type": "string", "title": "Lang"}}, {"name": "text", "in": "query", "required": true, "schema": {"type": "string", "title": "Text"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/ner/{lang}": {"get": {"tags": ["ner"], "summary": "Get Ner", "operationId": "get_ner_ner__lang__get", "parameters": [{"name": "lang", "in": "path", "required": true, "schema": {"type": "string", "title": "Lang"}}, {"name": "text", "in": "query", "required": true, "schema": {"type": "string", "title": "Text"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/custom-ner/{lang}": {"get": {"tags": ["custom-ner"], "summary": "Get Custom Ner", "operationId": "get_custom_ner_custom_ner__lang__get", "parameters": [{"name": "lang", "in": "path", "required": true, "schema": {"type": "string", "title": "Lang"}}, {"name": "text", "in": "query", "required": true, "schema": {"type": "string", "title": "Text"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/keywords/{lang}": {"get": {"tags": ["keywords"], "summary": "Get Keywords", "operationId": "get_keywords_keywords__lang__get", "parameters": [{"name": "lang", "in": "path", "required": true, "schema": {"type": "string", "title": "Lang"}}, {"name": "text", "in": "query", "required": true, "schema": {"type": "string", "title": "Text"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/similarity": {"post": {"tags": ["similarity"], "summary": "Similarity", "operationId": "similarity_similarity_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimilarityIn"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimilarityOut"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/tokenize": {"post": {"tags": ["tokenize"], "summary": "Tokenize", "operationId": "tokenize_tokenize_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenizeIn"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Tokenize Tokenize Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/synonyms": {"post": {"tags": ["synonyms"], "summary": "Synonyms", "operationId": "synonyms_synonyms_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SynonymIn"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Synonyms Synonyms Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/antonyms": {"post": {"tags": ["antonyms"], "summary": "Antonyms", "operationId": "antonyms_antonyms_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AntonymsIn"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Antonyms Antonyms Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/tospeech": {"post": {"tags": ["tospeech"], "summary": "Text To Speech", "operationId": "text_to_speech_tospeech_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TextToSpeech"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"AntonymsIn": {"properties": {"text": {"type": "string", "title": "Text"}}, "type": "object", "required": ["text"], "title": "AntonymsIn"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "SimilarityIn": {"properties": {"text_1": {"type": "string", "title": "Text 1"}, "text_2": {"type": "string", "title": "Text 2"}}, "type": "object", "required": ["text_1", "text_2"], "title": "SimilarityIn"}, "SimilarityOut": {"properties": {"score": {"type": "number", "title": "Score"}}, "type": "object", "required": ["score"], "title": "SimilarityOut"}, "SynonymIn": {"properties": {"text": {"type": "string", "title": "Text"}}, "type": "object", "required": ["text"], "title": "SynonymIn"}, "TextToSpeech": {"properties": {"text": {"type": "string", "title": "Text"}, "language": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Language", "default": "en"}}, "type": "object", "required": ["text"], "title": "TextToSpeech"}, "TokenizeIn": {"properties": {"text": {"type": "string", "title": "Text"}}, "type": "object", "required": ["text"], "title": "TokenizeIn"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}, "tags": [{"name": "similarity", "description": "Finds the similarity between 2 sentences using their word vectors."}, {"name": "tokenize", "description": "Takes in word, sentences e.t.c and return lexical infromation about each of words. e.g Nouns, Abstract Nouns, Co-ordinating conjunction."}, {"name": "synonyms", "description": "Takes in a word or a group of words separated by commas and return a list of English language synonyms for the words."}, {"name": "antonyms", "description": "Takes in a word or a group of words separated by commas and return a list of English language antonyms for the words."}, {"name": "tospeech", "description": "Takes in a string and returns an audio file of the text."}, {"name": "healthcheck", "description": "It basically sends a GET request to the route & hopes to get a \"200\""}, {"name": "summary", "description": "For the moment, a fake endpoint. It waits for the function and the summarization logic but it should enable to make a summary from a text."}, {"name": "ner", "description": "Takes in a string and returns entities (NER). Named Entity Recognition is a standard NLP problem which involves spotting named entities (people, places, organizations etc.) from a chunk of text, and classifying them into a predefined set of categories."}, {"name": "custom-ner", "description": "For the moment, a fake endpoint. It waits for a custom NER. It can be made with Spacy on specific entities such as Drugs, Fashion Brands...etc. Whatever you want."}, {"name": "keywords", "description": "Takes in a string and returns the main tags of the text."}]}